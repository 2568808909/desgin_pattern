package cn.ccb.pattern.structural.adapter;

/**
 * 适配器模式
 * 定义：将一个类的接口转换成客户期望的另一个接口，从而使原本不兼容的类可以一起工作
 * 类型:结构型
 *
 * 适用场景：
 * 1.已经存在的类，他的方法和需求不匹配时(方法结果相同或相似)
 * 2.不是软件设计阶段考虑的设计模式，而是随着软件维护，由于不同产品、不同厂家造成功能类似而接口不同的情况下的解决方案
 *
 * 优点：
 * 1.能提高类的透明性和复用性，现有类服用但不需要改变
 * 2.目标类和适配器类解耦，提高程序扩展性
 * 3.符合开闭原则
 *
 * 缺点：
 * 1.适配器编写的过程需要全面考虑，可能会增加系统的复杂性
 * 2.增加系统代码的可读难度
 *
 * 扩展：
 * 1.对象适配器，符合组合复用原则，使用委托机制
 * 2.类适配器，通过类继承实现
 *
 * 相关设计模式：
 * 1.适配器模式和外观模式：适配器和外观，都是对现有接口的封装。适配器是在复用原有的接口，它可以时两个接口协同共工作，
 * 而外观模式是定义了一个新的接口，使系统有一个更加方便的访问入口。
 *
 */
public class Adapter {
}
