package cn.ccb.pattern.structural.facade;

/**
 * 定义：外观模式，又叫门面模式，提供了一个统一的接口，用来访问子系统中的一群接口，他定义了一个高层接口，让子系统更容易使用
 * 类型：结构型
 *
 * 适用场景：
 * 1.子系统越来越复杂，增加外观模式提供简单调用接口
 * 2.构建多层系统接结构，利用外观对象作为每层的入口，简化层间调用
 *
 * 优点：
 * 1.简化了调用过程，无需了解深入的子系统，防止带来风险
 * 2.减少系统以来、松散耦合
 * 3.更好的划分访问层次
 * 4.符合迪米特法则，即最少知道原则。客户端无需知道系统内部细节。
 *
 * 缺点：
 * 1.增加子系统，扩展子系统行为时，容易引入风险
 * 2.不符合开闭原则
 *
 * 补充：
 * 其实也可以将门面类定义为一个接口，这样修改或者扩展子系统时，可以在一定的程度上符合开闭原则，从而避免风险。
 * 不过这也要看具体的业务场景，如果确定子系统不会轻易更改，我们也不一定要使用这种方式，直接使用普通类即可。
 *
 * 相关设计模式：
 * 外观模式和中介者模式：外观模式关注的是外界与子系统之间的交互，而中介者模式关注的是子系统内部的交互
 * 外观模式和单例模式：通常我们可以将外观对象设计成单例模式
 * 外观模式和抽象工厂模式：外观类可以通过抽象工厂获得子系统的类，如此子系统可以通过抽象工厂对外部屏蔽
 */
public class Facade {

}
